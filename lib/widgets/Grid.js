// Generated by CoffeeScript 1.3.3
(function() {
  var B, T, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  _.mixin(require("underscore.string"));

  T = require("../TermUI");

  B = require("../boxChars");

  T.Grid = (function(_super) {

    __extends(Grid, _super);

    function Grid(opts) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (opts == null) {
        opts = {};
      }
      Grid.__super__.constructor.call(this, opts);
      this.rows = (_ref = opts.rows) != null ? _ref : 2;
      this.cols = (_ref1 = opts.cols) != null ? _ref1 : 2;
      this.cellWidth = (_ref2 = opts.cellWidth) != null ? _ref2 : 1;
      this.cellHeight = (_ref3 = opts.cellHeight) != null ? _ref3 : 1;
      this.fit = (_ref4 = opts.fit) != null ? _ref4 : false;
      this.rowStyle = (_ref5 = opts.rowStyle) != null ? _ref5 : function() {
        return 1;
      };
      this.colStyle = (_ref6 = opts.colStyle) != null ? _ref6 : function() {
        return 1;
      };
      this.allowFocus = false;
      this.content = (_ref7 = opts.content) != null ? _ref7 : {};
    }

    Grid.prototype.draw = function() {
      var c, col, maxCol, maxRow, r, row, v, x, y, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results;
      maxRow = this.rows + (this.cellHeight * this.rows);
      maxCol = this.cols + (this.cellWidth * this.cols);
      x = 0;
      y = 0;
      _results = [];
      for (row = _i = 0, _ref = this.cellHeight + 1; 0 <= maxRow ? _i <= maxRow : _i >= maxRow; row = _i += _ref) {
        r = this.rowStyle(row + (this.cellHeight * row));
        x = 0;
        for (col = _j = 0, _ref1 = this.cellWidth + 1; 0 <= maxCol ? _j <= maxCol : _j >= maxCol; col = _j += _ref1) {
          if (((_ref2 = this.content[x]) != null ? _ref2[y] : void 0) != null) {
            this.content[x][y].bounds.x = this.bounds.x + col;
            this.content[x][y].bounds.y = this.bounds.y + row;
            this.content[x][y].draw();
          }
          c = this.colStyle(col + (this.cellWidth * col));
          T.pos(this.bounds.x + col, this.bounds.y + row);
          T.out(row === 0 ? col === 0 ? B(0, r, 0, c) : col < maxCol ? B(r, r, 0, c) : B(r, 0, 0, c) : row < maxRow ? col === 0 ? B(0, r, c, c) : col < maxCol ? B(r, r, c, c) : B(r, 0, c, c) : col === 0 ? B(0, r, c, 0) : col < maxCol ? B(r, r, c, 0) : B(r, 0, c, 0));
          if (row !== maxRow) {
            for (v = _k = 0, _ref3 = this.cellHeight; 0 <= _ref3 ? _k <= _ref3 : _k >= _ref3; v = 0 <= _ref3 ? ++_k : --_k) {
              T.pos(this.bounds.x + col, this.bounds.y + row + 1 + v).out(B(0, 0, c, c));
            }
          }
          if (col !== maxCol) {
            T.pos(this.bounds.x + col + 1, this.bounds.y + row).out(_.repeat(B(r, r, 0, 0), this.cellWidth));
          }
          x++;
        }
        _results.push(y++);
      }
      return _results;
    };

    return Grid;

  })(T.Widget);

}).call(this);
