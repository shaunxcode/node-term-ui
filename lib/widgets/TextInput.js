// Generated by CoffeeScript 1.3.3
(function() {
  var T, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  _.mixin(require("underscore.string"));

  T = require("../TermUI");

  T.TextInput = (function(_super) {

    __extends(TextInput, _super);

    function TextInput(opts) {
      var _ref, _ref1;
      TextInput.__super__.constructor.call(this, opts);
      this.lines = (_ref = opts.lines) != null ? _ref : 1;
      this.scrollPosX = 0;
      this.cursorX = 0;
      this.cursorY = 0;
      this.maxLength = (_ref1 = opts.maxLength) != null ? _ref1 : false;
      this.fgColor = T.C.g;
    }

    TextInput.prototype.focus = function() {
      TextInput.__super__.focus.call(this);
      T.pos(this.bounds.x + 1, this.bounds.y + 1).showCursor();
      return this.drawCursor();
    };

    TextInput.prototype.drawContent = function() {
      var content;
      T.hideCursor().saveFg().fg(this.fgColor);
      if (this.content.length > this.maxWidth) {
        content = this.content.slice(this.scrollPosX, (this.scrollPosX + this.maxWidth - 1) + 1 || 9e9).join("");
      } else {
        content = _.pad(this.content.join(""), this.maxWidth, " ", "right");
      }
      return T.pos(this.bounds.x + 1, this.bounds.y + 1).out(content).restoreFg();
    };

    TextInput.prototype.decCursorX = function() {
      if (this.cursorX > 0) {
        this.cursorX--;
      } else if (this.scrollPosX > 0) {
        this.scrollPosX--;
      }
      return this;
    };

    TextInput.prototype.incCursorX = function() {
      if (this.cursorX < this.maxWidth - 1 && this.cursorX < this.content.length) {
        this.cursorX++;
      } else if (this.scrollPosX < (this.content.length - this.maxWidth)) {
        this.scrollPosX++;
      }
      return this;
    };

    TextInput.prototype.drawCursor = function() {
      T.pos(this.bounds.x + 1 + this.cursorX, this.bounds.y + 1 + this.cursorY).showCursor();
      return this;
    };

    TextInput.prototype.handleKey = function(char, key) {
      var pos, _ref;
      if (TextInput.__super__.handleKey.call(this, char, key)) {
        return;
      }
      if (this.charValidation && !this.charValidation(char)) {
        this.emit("invalidChar", char);
        return;
      }
      if (this.content.length === this.maxLength) {
        this.content[this.content.length - 1] = char;
      } else {
        pos = this.scrollPosX + this.cursorX;
        [].splice.apply(this.content, [pos, 9e9].concat(_ref = [char].concat(this.content.slice(pos)))), _ref;
        if (this.content.length > this.maxWidth) {
          this.scrollPosX++;
        }
      }
      this.emit("change");
      this.incCursorX();
      this.drawContent();
      this.drawCursor();
      return this;
    };

    TextInput.prototype.onKey_backspace = function() {
      var pos;
      pos = this.scrollPosX + this.cursorX;
      if (pos === 1) {
        this.content = [];
      } else {
        this.content = this.content.slice(0, (pos - 2) + 1 || 9e9).concat(this.content.slice(pos));
      }
      if (this.scrollPosX > 0) {
        this.scrollPosX--;
      } else {
        this.decCursorX();
      }
      this.emit("change");
      this.drawContent();
      return this.drawCursor();
    };

    TextInput.prototype.onKey_left = function() {
      this.decCursorX();
      this.drawContent();
      return this.drawCursor();
    };

    TextInput.prototype.onKey_right = function() {
      this.incCursorX();
      this.drawContent();
      return this.drawCursor();
    };

    TextInput.prototype.onKey_enter = function() {
      return console.log("enter");
    };

    TextInput.prototype.textColor = function(color) {
      this.fgColor = color;
      this.drawContent();
      return this;
    };

    TextInput.prototype.val = function() {
      return this.content.join("");
    };

    return TextInput;

  })(T.Box);

}).call(this);
