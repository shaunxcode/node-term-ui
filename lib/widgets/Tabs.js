// Generated by CoffeeScript 1.3.3
(function() {
  var T, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  _.mixin(require("underscore.string"));

  T = require("../TermUI");

  T.Tabs = (function(_super) {

    __extends(Tabs, _super);

    function Tabs(opts) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      Tabs.__super__.constructor.call(this, opts);
      this.x = (_ref = opts.x) != null ? _ref : 1;
      this.y = (_ref1 = opts.y) != null ? _ref1 : 1;
      this.items = (_ref2 = opts.items) != null ? _ref2 : [];
      this.lineColor = (_ref3 = opts.lineColor) != null ? _ref3 : T.C.g;
      this.textColor = (_ref4 = opts.textColor) != null ? _ref4 : T.C.g;
      this.spaceBefore = (_ref5 = opts.spaceBefore) != null ? _ref5 : 1;
      this.spaceBetween = (_ref6 = opts.spaceBetween) != null ? _ref6 : 1;
      this.activeTab = (_ref7 = (_ref8 = opts.activeTab) != null ? _ref8 : this.items[0]) != null ? _ref7 : false;
      this._tabBounds = {};
      this._focussed = false;
    }

    Tabs.prototype.draw = function() {
      var tab, width, x, y, _i, _len, _ref;
      x = this.x;
      y = this.y;
      T.saveCursor().pos(x, y);
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tab = _ref[_i];
        width = tab.length + 2;
        this._tabBounds[tab] = {
          x: x,
          y: y,
          w: width,
          height: 3
        };
        T.pos(x, y + 2).out(T.B(1, 1, 0, 0)).pos(x + 1, y + 1).out(T.B(0, 0, 1, 1)).pos(x + 1, y).out(T.B(0, 1, 0, 1)).pos(x + 2, y).out(_.repeat(T.B(1, 1, 0, 0), width)).out(T.B(1, 0, 0, 1)).pos(x + 2, y + 1).out(tab).out(" Ã—").out(T.B(0, 0, 1, 1)).pos(x + 2, y + 2);
        T.pos(x + 1, y + 2);
        if (tab === this.activeTab) {
          T.out(T.B(1, 0, 1, 0)).out(_.repeat(" ", width)).out(T.B(0, 1, 1, 0));
        } else {
          T.out(T.B(1, 1, 1, 0)).out(_.repeat(T.B(1, 1, 0, 0), width)).out(T.B(1, 1, 1, 0));
        }
        x += width + 3;
      }
      T.out(_.repeat(T.B(1, 1, 0, 0), T.width - (x - 1)));
      T.restoreCursor();
      return Tabs.__super__.draw.call(this);
    };

    Tabs.prototype.hitTest = function(x, y) {
      var bounds, tab, _ref;
      T.pos(15, 15).out("x:" + x + ", y:" + y);
      _ref = this._tabBounds;
      for (tab in _ref) {
        bounds = _ref[tab];
        if (((bounds.x <= x && x <= (bounds.x + bounds.w - 1))) && ((bounds.y <= y && y <= (bounds.y + bounds.h - 1)))) {
          this.activeTab = tab;
          this.draw();
          return true;
        }
      }
    };

    Tabs.prototype._label = function(item, fg, bg) {
      var bounds;
      bounds = this._tabBounds[item];
      return T.pos(bounds.x + 2, bounds.y + 1).saveFg().saveBg().fg(fg).bg(bg).out(item).restoreFg().restoreBg();
    };

    Tabs.prototype.unfocusTab = function() {
      if (this._focussed !== false) {
        return this._label(this.items[this._focussed], T.C.g, T.C.k);
      }
    };

    Tabs.prototype.focusTab = function() {
      return this._label(this.items[this._focussed], T.C.k, T.C.g);
    };

    Tabs.prototype.focus = function() {
      Tabs.__super__.focus.call(this);
      return this.handleTab();
    };

    Tabs.prototype.handleTab = function() {
      this.unfocusTab();
      if (this._focussed === false) {
        this._focussed = 0;
      } else {
        this._focussed++;
      }
      if (this._focussed === this.items.length) {
        this._focussed = false;
        return false;
      }
      return this.focusTab();
    };

    Tabs.prototype.onKey_space = function() {
      if (this._focussed !== false) {
        this.activeTab = this.items[this._focussed];
        this.draw();
        this.focusTab();
        return this.emit("activeTab", this.activeTab);
      }
    };

    Tabs.prototype.onKey_left = function() {
      this.unfocusTab();
      if (this._focussed === 0) {
        this._focussed = this.items.length - 1;
      } else {
        this._focussed--;
      }
      return this.focusTab();
    };

    Tabs.prototype.onKey_right = function() {
      this.unfocusTab();
      this._focussed++;
      if (this._focussed === this.items.length) {
        this._focussed = 0;
      }
      return this.focusTab();
    };

    return Tabs;

  })(T.Widget);

}).call(this);
