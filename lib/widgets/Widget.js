// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, T,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  T = require("../TermUI");

  EventEmitter = require('events').EventEmitter;

  T.Widget = (function(_super) {

    __extends(Widget, _super);

    function Widget(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      this.options = options != null ? options : {};
      this.bounds = {
        x: ((_ref = this.options.bounds) != null ? _ref.x : void 0) || 1,
        y: ((_ref1 = this.options.bounds) != null ? _ref1.y : void 0) || 1,
        w: ((_ref2 = this.options.bounds) != null ? _ref2.w : void 0) || 1,
        h: ((_ref3 = this.options.bounds) != null ? _ref3.h : void 0) || 1
      };
      this._widgetIndex = (T.Widget.instances.push(this)) - 1;
      this.allowFocus = (_ref4 = this.options.allowFocus) != null ? _ref4 : true;
      this.visible = false;
    }

    Widget.prototype.destroy = function() {
      var instances, wi, widget, _i, _len, _ref;
      wi = 0;
      instances = [];
      _ref = T.Widget.activeInstances;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        widget = _ref[_i];
        if (!(widget !== this)) {
          continue;
        }
        widget._widgetIndex = wi++;
        instances.push(widget);
      }
      T.Widget.activeInstances = instances;
      this.destroyed = true;
      return this.allowFocus = false;
    };

    Widget.prototype.calcDims = function() {
      return this;
    };

    Widget.prototype.disallowFocus = function() {
      this.allowFocus = false;
      return this;
    };

    Widget.prototype.draw = function() {
      this.visible = true;
      this.emit("drawn");
      return this;
    };

    Widget.prototype.hitTest = function(x, y) {
      return ((this.bounds.x <= x && x <= (this.bounds.x + this.bounds.w - 1))) && ((this.bounds.y <= y && y <= (this.bounds.y + this.bounds.h - 1)));
    };

    Widget.prototype.hide = function() {
      this.hidden = true;
      this.visible = false;
      return this;
    };

    Widget.prototype.show = function() {
      this.hidden = false;
      this.draw();
      return this;
    };

    Widget.prototype.handleTab = function() {};

    Widget.prototype.handleKey = function(char, key) {
      if (((key != null ? key.name : void 0) != null) && this["onKey_" + key.name]) {
        return this["onKey_" + key.name]();
      }
    };

    Widget.prototype.focus = function() {
      var _ref;
      if (T.Widget.activeInstance === this) {
        return;
      }
      if ((_ref = T.Widget.activeInstance) != null) {
        if (typeof _ref.blur === "function") {
          _ref.blur();
        }
      }
      T.Widget.activeInstance = this;
      T.Widget.activeIndex = this._widgetIndex;
      this._active = true;
      this.emit("focus");
      return this;
    };

    Widget.prototype.blur = function() {
      this._active = false;
      this.emit("blur");
      return this;
    };

    return Widget;

  })(EventEmitter);

  T.Widget.instances = [];

  T.Widget.activeIndex = false;

  T.Widget.activeInstance = false;

  T.Widget.nextFocussableInstance = function(loopAround) {
    var widget, windex, _i, _len, _ref;
    if (loopAround == null) {
      loopAround = true;
    }
    _ref = T.Widget.instances.slice(T.Widget.activeIndex || 0);
    for (windex = _i = 0, _len = _ref.length; _i < _len; windex = ++_i) {
      widget = _ref[windex];
      if ((widget !== T.Widget.activeInstance) && widget.allowFocus && widget.visible) {
        return widget.focus();
      }
    }
    if (loopAround) {
      T.Widget.activeIndex = 0;
      return T.Widget.nextFocussableInstance(false);
    }
  };

  T.on("resize", function() {
    var widget, _i, _len, _ref, _results;
    T.clear();
    _ref = T.Widget.instances;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      widget = _ref[_i];
      _results.push(widget.draw());
    }
    return _results;
  });

  T.on("keypress", function(char, key) {
    if (T.Widget.instances.length) {
      if ((key != null ? key.name : void 0) === "tab") {
        if (T.Widget.activeInstance === false || (!T.Widget.activeInstance.handleTab())) {
          return T.Widget.nextFocussableInstance();
        }
      } else if (T.Widget.activeInstance) {
        return T.Widget.activeInstance.handleKey(char, key);
      }
    }
  });

  T.on("any", function(event, eventData) {
    var widget, _i, _len, _ref, _results;
    _ref = T.Widget.instances;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      widget = _ref[_i];
      if (widget.hitTest(eventData.x, eventData.y)) {
        eventData.target = widget;
        _results.push(widget.emit(event, eventData));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

}).call(this);
