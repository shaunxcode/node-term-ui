// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, T, TermUI, fs, hex, keypress, rgb, rgb5, tty, util, _, _dc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require("fs");

  util = require('util');

  tty = require('tty');

  keypress = require('keypress');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  _.mixin(require('underscore.string'));

  hex = function(color) {
    var c;
    c = color[0] === '#' ? color.substring(1) : color;
    return [parseInt(c.substring(0, 2), 16), parseInt(c.substring(2, 4), 16), parseInt(c.substring(4, 6), 16)];
  };

  rgb5 = function(r, g, b) {
    return 16 + (Math.round(r) * 36) + (Math.round(g) * 6) + Math.round(b);
  };

  rgb = function(r, g, b) {
    return rgb5(r / 255 * 5, g / 255 * 5, b / 255 * 5);
  };

  _dc = 0;

  module.exports = T = new (TermUI = (function(_super) {

    __extends(TermUI, _super);

    TermUI.prototype._d = function() {
      var vals, x;
      vals = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fs.appendFile("" + (process.cwd()) + "/_term-ui-debug.log", "" + (_dc++) + ": " + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = vals.length; _i < _len; _i++) {
          x = vals[_i];
          _results.push(JSON.stringify(x));
        }
        return _results;
      })()).join(" ")) + "\n");
    };

    function TermUI() {
      this.handleData = __bind(this.handleData, this);

      this.handleKeypress = __bind(this.handleKeypress, this);

      this.handleSizeChange = __bind(this.handleSizeChange, this);
      if (tty.isatty(process.stdin)) {
        keypress(process.stdin);
        process.stdin.setRawMode(true);
        process.stdin.resume();
        process.stdin.on('keypress', this.handleKeypress);
        process.stdin.on('data', this.handleData);
        if (process.listeners('SIGWINCH').length === 0) {
          process.on('SIGWINCH', this.handleSizeChange);
        }
        this.handleSizeChange();
        this.enableMouse();
        this._bg = this.C.k;
        this._fg = this.C.g;
        this.isTerm = true;
      } else {
        this.isTerm = false;
      }
    }

    TermUI.prototype.C = {
      k: 0,
      r: 1,
      g: 2,
      y: 3,
      b: 4,
      m: 5,
      c: 6,
      w: 7,
      x: 9
    };

    TermUI.prototype.S = {
      normal: 0,
      bold: 1,
      underline: 4,
      blink: 5,
      inverse: 8
    };

    TermUI.prototype.B = require("./boxChars");

    TermUI.prototype.G = require("./Geometry");

    TermUI.prototype.SYM = {
      star: '\u2605',
      check: '\u2714',
      x: '\u2718',
      triUp: '\u25b2',
      triDown: '\u25bc',
      triLeft: '\u25c0',
      triRight: '\u25b6',
      fn: '\u0192',
      arrowUp: '\u2191',
      arrowDown: '\u2193',
      arrowLeft: '\u2190',
      arrowRight: '\u2192'
    };

    TermUI.prototype.handleSizeChange = function() {
      var winsize;
      winsize = process.stdout.getWindowSize();
      this.width = winsize[0];
      this.height = winsize[1];
      return this.emit('resize', {
        w: this.width,
        h: this.height
      });
    };

    TermUI.prototype.out = function(buf) {
      if (this.isTerm) {
        process.stdout.write(String(buf));
      }
      return this;
    };

    TermUI.prototype.hideCursor = function() {
      this.out('\x1b[?25l');
      return this;
    };

    TermUI.prototype.showCursor = function() {
      this.out('\x1b[?25h');
      return this;
    };

    TermUI.prototype.saveCursor = function() {
      this.out('\x1b7');
      return this;
    };

    TermUI.prototype.restoreCursor = function() {
      this.out('\x1b8');
      return this;
    };

    TermUI.prototype.clear = function() {
      this.out('\x1b[2J');
      this.home();
      return this;
    };

    TermUI.prototype.pos = function(x, y) {
      x = x < 0 ? this.width - x : x;
      y = y < 0 ? this.height - y : y;
      x = Math.floor(Math.max(Math.min(x, this.width), 1));
      y = Math.floor(Math.max(Math.min(y, this.height), 1));
      this.out("\x1b[" + y + ";" + x + "H");
      return this;
    };

    TermUI.prototype.home = function() {
      this.pos(1, 1);
      return this;
    };

    TermUI.prototype.end = function() {
      this.pos(1, -1);
      return this;
    };

    TermUI.prototype.fgRgb = function(r, g, b) {
      return this.fg("8;5;" + (rgb(r, g, b)));
    };

    TermUI.prototype.fgHex = function(h) {
      var b, g, r, _ref;
      _ref = hex(h), r = _ref[0], g = _ref[1], b = _ref[2];
      return this.fgRgb(r, g, b);
    };

    TermUI.prototype.fg = function(c) {
      this._fg = c;
      this.out("\x1b[3" + c + "m");
      return this;
    };

    TermUI.prototype.saveFg = function() {
      this._savedFg = this._fg;
      return this;
    };

    TermUI.prototype.restoreFg = function() {
      this.fg(this._savedFg);
      return this;
    };

    TermUI.prototype.bg = function(c) {
      this._bg = c;
      this.out("\x1b[4" + c + "m");
      return this;
    };

    TermUI.prototype.saveBg = function() {
      this._savedBg = this._bg;
      return this;
    };

    TermUI.prototype.restoreBg = function() {
      this.bg(this._savedBg);
      return this;
    };

    TermUI.prototype.hifg = function(c) {
      this.out("\x1b[38;5;" + c + "m");
      return this;
    };

    TermUI.prototype.hibg = function(c) {
      this.out("\x1b[48;5;" + c + "m");
      return this;
    };

    TermUI.prototype.enableMouse = function() {
      keypress.enableMouse(process.stdout);
      return this;
    };

    TermUI.prototype.disableMouse = function() {
      keypress.disableMouse(process.stdout);
      return this;
    };

    TermUI.prototype.eraseLine = function() {
      this.out('\x1b[2K');
      return this;
    };

    TermUI.prototype.eraseToEnd = function() {
      this.out('\x1b[K');
      return this;
    };

    TermUI.prototype.handleKeypress = function(c, key) {
      if (key && key.ctrl && key.name === 'c') {
        return this.quit();
      } else {
        return this.emit('keypress', c, key);
      }
    };

    TermUI.prototype.handleData = function(d) {
      var buttons, event, eventData;
      eventData = {};
      buttons = ['left', 'middle', 'right'];
      if (d[0] === 0x1b && d[1] === 0x5b && d[2] === 0x4d) {
        switch (d[3] & 0x60) {
          case 0x20:
            if ((d[3] & 0x3) < 0x3) {
              event = 'mousedown';
              eventData.button = buttons[d[3] & 0x3];
            } else {
              event = 'mouseup';
            }
            break;
          case 0x40:
            event = 'drag';
            if ((d[3] & 0x3) < 0x3) {
              eventData.button = buttons[d[3] & 0x3];
            }
            break;
          case 0x60:
            event = 'wheel';
            if (d[3] & 0x1) {
              eventData.direction = 'down';
            } else {
              eventData.direction = 'up';
            }
        }
        eventData.shift = (d[3] & 0x4) > 0;
        eventData.x = d[4] - 32;
        eventData.y = d[5] - 32;
        this.emit(event, eventData);
        return this.emit('any', event, eventData);
      }
    };

    TermUI.prototype.quit = function() {
      this.fg(this.C.x).bg(this.C.x).disableMouse().showCursor().clear();
      process.stdin.setRawMode(false);
      return process.exit();
    };

    return TermUI;

  })(EventEmitter));

  require("./widgets/Widget");

  require("./widgets/Button");

  require("./widgets/Box");

  require("./widgets/Tabs");

  require("./widgets/Select");

  require("./widgets/TextInput");

  require("./widgets/Grid");

}).call(this);
